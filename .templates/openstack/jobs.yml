---
meta:
  azs:
    z1: (( param "What availability zone should the *_z1 vms be placed in?" ))
    z2: (( param "What availability zone should the *_z2 vms be placed in?" ))
    z3: (( param "What availability zone should the *_z3 vms be placed in?" ))

  net_ids: (( param "Specify net_id for each Az" ))
  dns: (( param "Specify the DNS for your subnets" ))
  security_groups: (( param "Specify the security groups" ))

  route_registrar:
    routes:
    - name: cf-redis-broker
      health_check:
        name: cf-redis-broker
        script_path: /var/vcap/jobs/cf-redis-broker/bin/health_check.sh
      port: 12350
      registration_interval: 10s
      tags:
        component: redis-broker
        env: (( grab name ))
      uris:
        - (( concat jobs.broker.networks.redis_z1.static_ips[0] ":12350" ))
  cell:
    templates:
    - { name: shield-agent, release: shield }

  management:
    shield:
      agent:
        autoprovision: (( param "What is the shield autoprovision url?" )) 
      daemon:
        domain: (( param "What is the shield daemon domain?" )) 

  cell_ips: (( grab jobs.cell_z1.networks.redis_z1.static_ips jobs.cell_z2.networks.redis_z2.static_ips jobs.cell_z3.networks.redis_z3.static_ips )) 

properties:
  cf:
    .: (( inject meta.cf ))

  redis:
    agent:
      backend_port: 54321
    bg_save_command: somenotsorandomstring
    shared_plan:
      instance_limit: 15
    broker:
      auth:
        username: (( vault meta.vault_prefix "/servicebroker:username" ))
        password: (( vault meta.vault_prefix "/servicebroker:password" ))
      subdomain: cf-redis-broker
      backend_host: (( grab jobs.broker.networks.redis_z1.static_ips[0] ))
      backend_port: 12345
      dedicated_nodes: (( grab meta.cell_ips ))
      enable_service_access: true
      host: (( grab jobs.broker.networks.redis_z1.static_ips[0] ))
      name: cf-redis-broker
      network: redis_z1
      route_name: cf-redis-broker
      service_id: (( param "Specify service_id" )) 
      service_name: redis
      shared_vm_plan_id: (( param "Specify shared vm plan id" )) 
      dedicated_vm_plan_id: (( param "Specify dedicated vm plan id" )) 
      service_instance_limit: 100
      nginx:
        port: 12350

    config_command: configalias
    maxmemory: 3mb
    save_command: somerandomstring 

  broker:
    name: cf-redis-broker
    host: (( concat jobs.broker.networks.redis_z1.static_ips[0] ":12350" ))
    username: (( vault meta.vault_prefix "/servicebroker:username" ))
    password: (( vault meta.vault_prefix "/servicebroker:password" ))
    protocol: http

compilation:
  network: redis_z1
  reuse_compilation_vms: true
  workers: 4

  cloud_properties:
    instance_type: m1.large
    availability_zone: (( grab meta.azs.z1 ))

# Note: This will migrate to Cloud Config
resource_pools:
- name: medium_z1 
  stemcell: (( grab meta.stemcell ))
  cloud_properties:
    instance_type: m1.medium
    availability_zone: (( grab meta.azs.z1 ))

- name: medium_z2 
  stemcell: (( grab meta.stemcell ))
  cloud_properties:
    instance_type: m1.medium
    availability_zone: (( grab meta.azs.z2 ))

- name: medium_z3 
  stemcell: (( grab meta.stemcell ))
  cloud_properties:
    instance_type: m1.medium
    availability_zone: (( grab meta.azs.z3 ))

# Note: This will migrate to Cloud Config
disk_pools:
- name: small
  disk_size: 10_240

- name: medium
  disk_size: 40_960

- name: large
  disk_size: 102_400

- name: xlarge
  disk_size: 204_800

- name: small_ssd
  disk_size: 10_240

- name: medium_ssd
  disk_size: 40_960

- name: large_ssd
  disk_size: 102_400

- name: xlarge_ssd
  disk_size: 204_800

# This will migrate to Cloud config 
networks:

- name: redis_z1
  type: manual
  subnets:
  - cloud_properties:
      security_groups: (( grab meta.security_groups ))
      net_id: (( grab meta.net_ids.z1 ))
    dns: (( grab meta.dns ))
    gateway: (( param "Enter the Gateway for this subnet" )) 
    reserved: (( param "Enter the reserved IP ranges for this subnet" )) 
    range: (( param "Enter the CIDR address for this subnet" )) 
    static: (( param "Enter the static IP ranges for this subnet" )) 

- name: redis_z2
  type: manual
  subnets:
  - cloud_properties:
      security_groups: (( grab meta.security_groups ))
      net_id: (( grab meta.net_ids.z2 ))
    dns: (( grab meta.dns ))
    gateway: (( param "Enter the Gateway for this subnet" )) 
    reserved: (( param "Enter the reserved IP ranges for this subnet" )) 
    range: (( param "Enter the CIDR address for this subnet" )) 
    static: (( param "Enter the static IP ranges for this subnet" )) 

- name: redis_z3
  type: manual
  subnets:
  - cloud_properties:
      security_groups: (( grab meta.security_groups ))
      net_id: (( grab meta.net_ids.z3 ))
    dns: (( grab meta.dns ))
    gateway: (( param "Enter the Gateway for this subnet" )) 
    reserved: (( param "Enter the reserved IP ranges for this subnet" )) 
    range: (( param "Enter the CIDR address for this subnet" )) 
    static: (( param "Enter the static IP ranges for this subnet" )) 

jobs:
- name: broker
  persistent_disk_pool: small
  resource_pool: medium_z1
  networks:
  - name: redis_z1
    static_ips: (( static_ips(0) ))
  properties:
    .: (( inject meta.management ))
    route_registrar: (( grab meta.route_registrar ))
    nats:
      .: (( inject meta.nats ))

- name: cell_z1
  instances: 1
  persistent_disk_pool: medium
  resource_pool: medium_z1
  networks:
    - name: redis_z1
      static_ips: (( static_ips(1,2,3,4,5,6,7,8) )) # 0 is for the broker
  templates: (( grab meta.cell.templates ))
  properties:
    .: (( inject meta.management ))

- name: cell_z2
  instances: 1
  persistent_disk_pool: medium
  resource_pool: medium_z2
  networks:
    - name: redis_z2
      static_ips: (( static_ips(0,1,2,3,4,5,6,7,8) ))
  templates: (( grab meta.cell.templates ))
  properties:
    .: (( inject meta.management ))

- name: cell_z3
  instances: 1
  persistent_disk_pool: medium
  resource_pool: medium_z3
  networks:
    - name: redis_z3
      static_ips: (( static_ips(0,1,2,3,4,5,6,7,8) ))
  templates: (( grab meta.cell.templates ))
  properties:
    .: (( inject meta.management ))

- name: broker-deregistrar
  resource_pool: medium_z1
  networks:
    - name: redis_z1
  properties:
    .: (( inject properties.broker ))

- name: broker-registrar
  resource_pool: medium_z1
  networks:
    - name: redis_z1
  properties:
    .: (( inject properties.broker ))

- name: smoke-tests
  resource_pool: medium_z1
  networks:
    - name: redis_z1
